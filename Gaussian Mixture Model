{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Gaussian Mixture Model","provenance":[{"file_id":"1fL0yJfEZVWGQV4ixEt5K0QLC4T-4LusD","timestamp":1657356602262}],"collapsed_sections":[],"authorship_tag":"ABX9TyPUdpQEjjj0V9nao6CqIXqU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive/')"],"metadata":{"id":"Bj8nMDBY-kJO","executionInfo":{"status":"ok","timestamp":1661922991277,"user_tz":-330,"elapsed":6792,"user":{"displayName":"Raghav Magazine","userId":"15283799250995730964"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d65bad6a-a5d7-4bce-ab7e-61b424d18304"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"]}]},{"cell_type":"code","source":["import librosa\n","from glob import glob\n","import numpy as np\n","from sklearn.mixture import GaussianMixture\n","import math\n","import sklearn.metrics"],"metadata":{"id":"-YTeKJ8oD4-1","executionInfo":{"status":"ok","timestamp":1661922993886,"user_tz":-330,"elapsed":2613,"user":{"displayName":"Raghav Magazine","userId":"15283799250995730964"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["base_path='/content/drive/MyDrive/Speaker Recognition Data/Guwahati dataset'\n","train_path= base_path + '/' + 'Train_Folder'\n","test_path=  base_path + '/' + 'Test_Folder'"],"metadata":{"id":"aUKXqfwOBIpa","executionInfo":{"status":"ok","timestamp":1661922993886,"user_tz":-330,"elapsed":7,"user":{"displayName":"Raghav Magazine","userId":"15283799250995730964"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["cl_sz=64"],"metadata":{"id":"LXgnK8AH_VOd","executionInfo":{"status":"ok","timestamp":1661923000028,"user_tz":-330,"elapsed":389,"user":{"displayName":"Raghav Magazine","userId":"15283799250995730964"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["train_files_1 = glob(train_path+\"/*/*_AH01OENC.wav\")\n","train_files_2 = glob(train_path+\"/*/*_AH01MENC.wav\")\n","train_files = train_files_1 + train_files_2\n","train_files.sort()"],"metadata":{"id":"wPDIBqFTmrIE","executionInfo":{"status":"ok","timestamp":1661923004468,"user_tz":-330,"elapsed":4056,"user":{"displayName":"Raghav Magazine","userId":"15283799250995730964"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["test_files_1 = glob(test_path+\"/*/*_AH01OENC*\")\n","test_files_2 = glob(test_path+\"/*/*_AH01MENC*\")\n","test_files = test_files_1 + test_files_2\n","test_files.sort()"],"metadata":{"id":"3lo-j0YUmr2s","executionInfo":{"status":"ok","timestamp":1661923016090,"user_tz":-330,"elapsed":574,"user":{"displayName":"Raghav Magazine","userId":"15283799250995730964"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["len(train_files)"],"metadata":{"id":"PjKU6ihTmvSY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1661923004468,"user_tz":-330,"elapsed":9,"user":{"displayName":"Raghav Magazine","userId":"15283799250995730964"}},"outputId":"15ecdae6-ea43-4391-eb00-62df6aea6b9e"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["70"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["len(test_files)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LMSLqCGjmysx","executionInfo":{"status":"ok","timestamp":1661923017772,"user_tz":-330,"elapsed":5,"user":{"displayName":"Raghav Magazine","userId":"15283799250995730964"}},"outputId":"7fc9a857-f500-49d6-fe15-9965a72b4ad8"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1055"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["GMMSPK =[]\n","for i in range(len(train_files)):\n"," audio_data, fs = librosa.load(train_files[i],sr=8000)\n","\n"," audio_data=audio_data-np.mean(audio_data)\n"," audio_data=audio_data/(1.01*(max(abs(audio_data))))\n","\n"," MFCC    = librosa.feature.mfcc(y=audio_data,sr=fs, n_mfcc=14, lifter=1,dct_type=3,hop_length=int(0.01*fs), win_length=int(0.02*fs),window='hann', n_mels=24)\n"," MFCC_d  = librosa.feature.delta(MFCC, order=1)\n"," MFCC_dd = librosa.feature.delta(MFCC, order=2)\n","\n"," MFCC=MFCC.T\n"," MFCC_d=MFCC_d.T\n"," MFCC_dd=MFCC_dd.T\n","\n"," MFCC=MFCC[:,1:14]\n"," MFCC_d=MFCC_d[:,1:14]\n"," MFCC_dd=MFCC_dd[:,1:14]\n","\n"," X = np.concatenate((MFCC, MFCC_d), axis=1)\n"," X = np.concatenate((X, MFCC_dd), axis=1)\n","\n"," gmm=GaussianMixture(n_components=cl_sz, random_state=0, max_iter=100,covariance_type='diag').fit(X)\n"," GMMSPK.append(gmm)\n","\n"," print('Training for SPK ',i,' completed')"],"metadata":{"id":"q1F6wQ0vCffR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn import mixture\n","\n","for i in range(len(train_files)):\n"," gmm_name = 'Speaker_'+str(i)\n"," np.save(\"/content/drive/MyDrive/Speaker Recognition Data/GMM Models/\"+gmm_name+'_weights', GMMSPK[i].weights_, allow_pickle=False)\n"," np.save(\"/content/drive/MyDrive/Speaker Recognition Data/GMM Models/\"+gmm_name + '_means', GMMSPK[i].means_, allow_pickle=False)\n"," np.save(\"/content/drive/MyDrive/Speaker Recognition Data/GMM Models/\"+gmm_name + '_covariances', GMMSPK[i].covariances_, allow_pickle=False)\n"," np.save(\"/content/drive/MyDrive/Speaker Recognition Data/GMM Models/\"+gmm_name + '_precisions_cholesky', GMMSPK[i].precisions_cholesky_, allow_pickle=False)"],"metadata":{"id":"1dEBc4jrkHmU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["true = []\n","for i in range(len(test_files)):\n","  true.append(test_files[i].split('/')[7])\n","from sklearn import preprocessing\n","le = preprocessing.LabelEncoder()\n","true = le.fit_transform(true)"],"metadata":{"id":"UuI6YirOP8Ya"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Score = []\n","speaker=[]\n","pred = []\n","prob=[]\n","for i in range(len(test_files)):\n"," audio_data, fs = librosa.load(test_files[i],sr=8000)\n","\n"," audio_data=audio_data-np.mean(audio_data)\n"," audio_data=audio_data/(1.01*(max(abs(audio_data))))\n","\n"," MFCC=librosa.feature.mfcc(y=audio_data,sr=fs, n_mfcc=14, lifter=1,dct_type=3,hop_length=int(0.01*fs), win_length=int(0.02*fs),window='hann', n_mels=24)\n"," MFCC_d  = librosa.feature.delta(MFCC, order=1)\n"," MFCC_dd = librosa.feature.delta(MFCC, order=2)\n","\n"," MFCC=MFCC.T\n"," MFCC_d=MFCC_d.T\n"," MFCC_dd=MFCC_dd.T\n","\n"," MFCC=MFCC[:,1:14]\n"," MFCC_d=MFCC_d[:,1:14]\n"," MFCC_dd=MFCC_dd[:,1:14]\n","\n"," X = np.concatenate((MFCC, MFCC_d), axis=1)\n"," X = np.concatenate((X, MFCC_dd), axis=1)\n","\n"," for j in range(0,70):#len(GMMSPK)):\n","  gmm_name = \"Speaker_\"+str(j)\n","  loaded_gmm = mixture.GaussianMixture(n_components = cl_sz, covariance_type='diag')\n","  means = np.load(\"/content/drive/MyDrive/Speaker Recognition Data/GMM Models/\"+gmm_name + '_means.npy')\n","  covar = np.load(\"/content/drive/MyDrive/Speaker Recognition Data/GMM Models/\"+gmm_name + '_covariances.npy')\n","  loaded_gmm.weights_ = np.load(\"/content/drive/MyDrive/Speaker Recognition Data/GMM Models/\"+gmm_name + '_weights.npy')\n","  loaded_gmm.precisions_cholesky_ = np.load(\"/content/drive/MyDrive/Speaker Recognition Data/GMM Models/\"+gmm_name + '_precisions_cholesky.npy')\n","  loaded_gmm.means_ = means\n","  loaded_gmm.covariances_ = covar\n","  log_likelihood = loaded_gmm.score(X)\n","  Score.append(log_likelihood)\n"," pred_label = np.argmax(Score)\n"," if(pred_label == true[i]):\n","   pred.append(1)\n"," else:\n","   pred.append(0)  \n"," prob.append(abs(max(Score)))  \n"," speaker.append(pred_label)\n"," Score=[]\n"," print(\"Testing of Utterence \"+str(i)+\" completed\")"],"metadata":{"id":"vZHXUyenH75b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1661594594222,"user_tz":-330,"elapsed":151278,"user":{"displayName":"Raghav Magazine","userId":"15283799250995730964"}},"outputId":"e64cd7cb-1767-41e7-9e76-015b870737c4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Testing of Utterence 0 completed\n","Testing of Utterence 1 completed\n","Testing of Utterence 2 completed\n","Testing of Utterence 3 completed\n","Testing of Utterence 4 completed\n","Testing of Utterence 5 completed\n","Testing of Utterence 6 completed\n","Testing of Utterence 7 completed\n","Testing of Utterence 8 completed\n","Testing of Utterence 9 completed\n","Testing of Utterence 10 completed\n","Testing of Utterence 11 completed\n","Testing of Utterence 12 completed\n","Testing of Utterence 13 completed\n","Testing of Utterence 14 completed\n","Testing of Utterence 15 completed\n","Testing of Utterence 16 completed\n","Testing of Utterence 17 completed\n","Testing of Utterence 18 completed\n","Testing of Utterence 19 completed\n","Testing of Utterence 20 completed\n","Testing of Utterence 21 completed\n","Testing of Utterence 22 completed\n","Testing of Utterence 23 completed\n","Testing of Utterence 24 completed\n","Testing of Utterence 25 completed\n","Testing of Utterence 26 completed\n","Testing of Utterence 27 completed\n","Testing of Utterence 28 completed\n","Testing of Utterence 29 completed\n","Testing of Utterence 30 completed\n","Testing of Utterence 31 completed\n","Testing of Utterence 32 completed\n","Testing of Utterence 33 completed\n","Testing of Utterence 34 completed\n","Testing of Utterence 35 completed\n","Testing of Utterence 36 completed\n","Testing of Utterence 37 completed\n","Testing of Utterence 38 completed\n","Testing of Utterence 39 completed\n","Testing of Utterence 40 completed\n","Testing of Utterence 41 completed\n","Testing of Utterence 42 completed\n","Testing of Utterence 43 completed\n","Testing of Utterence 44 completed\n","Testing of Utterence 45 completed\n","Testing of Utterence 46 completed\n","Testing of Utterence 47 completed\n","Testing of Utterence 48 completed\n","Testing of Utterence 49 completed\n","Testing of Utterence 50 completed\n","Testing of Utterence 51 completed\n","Testing of Utterence 52 completed\n","Testing of Utterence 53 completed\n","Testing of Utterence 54 completed\n","Testing of Utterence 55 completed\n","Testing of Utterence 56 completed\n","Testing of Utterence 57 completed\n","Testing of Utterence 58 completed\n","Testing of Utterence 59 completed\n","Testing of Utterence 60 completed\n","Testing of Utterence 61 completed\n","Testing of Utterence 62 completed\n","Testing of Utterence 63 completed\n","Testing of Utterence 64 completed\n","Testing of Utterence 65 completed\n","Testing of Utterence 66 completed\n","Testing of Utterence 67 completed\n","Testing of Utterence 68 completed\n","Testing of Utterence 69 completed\n","Testing of Utterence 70 completed\n"]}]},{"cell_type":"code","source":["def compute_eer(label, pred, positive_label=1):\n","\n","    fpr, tpr, threshold = sklearn.metrics.roc_curve(label, pred)\n","    fnr = 1 - tpr\n","\n","    eer_threshold = threshold[np.nanargmin(np.absolute((fnr - fpr)))]\n","\n","    eer_1 = fpr[np.nanargmin(np.absolute((fnr - fpr)))]\n","    eer_2 = fnr[np.nanargmin(np.absolute((fnr - fpr)))]\n","\n","    eer = (eer_1 + eer_2) / 2\n","    return eer"],"metadata":{"id":"TP01vejAYoDH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["eer = compute_eer(pred, prob)\n","print('The equal error rate is {:.3f}'.format(eer))"],"metadata":{"id":"yPu0aLbzYwRE","colab":{"base_uri":"https://localhost:8080/","height":429},"executionInfo":{"status":"error","timestamp":1661595817464,"user_tz":-330,"elapsed":8,"user":{"displayName":"Raghav Magazine","userId":"15283799250995730964"}},"outputId":"29d8e6f0-675f-4c2b-d964-53d8ef683274"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_ranking.py:992: UndefinedMetricWarning: No negative samples in y_true, false positive value should be meaningless\n","  UndefinedMetricWarning,\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-30-5fad3c76993d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0meer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_eer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprob\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'The equal error rate is {:.3f}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0meer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-29-59d1891f1812>\u001b[0m in \u001b[0;36mcompute_eer\u001b[0;34m(label, pred, positive_label)\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mfnr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mtpr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0meer_threshold\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mthreshold\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnanargmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabsolute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfnr\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mfpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0meer_1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfpr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnanargmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabsolute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfnr\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mfpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mnanargmin\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/numpy/lib/nanfunctions.py\u001b[0m in \u001b[0;36mnanargmin\u001b[0;34m(a, axis)\u001b[0m\n\u001b[1;32m    497\u001b[0m         \u001b[0mmask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 499\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"All-NaN slice encountered\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    500\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    501\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: All-NaN slice encountered"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","print(\"The Accuracy is \", accuracy_score(true, speaker))"],"metadata":{"id":"Li5X7nlnZx-K","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1661594604728,"user_tz":-330,"elapsed":409,"user":{"displayName":"Raghav Magazine","userId":"15283799250995730964"}},"outputId":"296ff25c-772e-4c8a-8910-f4f4691f2d63"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The Accuracy is  1.0\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","CM = confusion_matrix(true, speaker)\n","print(CM)"],"metadata":{"id":"morGHJq3Aw1x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import seaborn as sn\n","import matplotlib.pyplot as plt\n","sn.set(rc = {'figure.figsize':(15,15)})\n","hm = sn.heatmap(data =CM)\n","plt.show()"],"metadata":{"id":"n1LdqasPo0lH"},"execution_count":null,"outputs":[]}]}